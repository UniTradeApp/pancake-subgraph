type PancakeFactory @entity {
  id: ID!

  "Total of pairs"
  totalPairs: BigInt!

  "Total of transactions"
  totalTransactions: BigInt!

  # untracked values - less confident USD scores
  untrackedVolumeUSD: BigDecimal!

  # total liquidity
  totalLiquidityUSD: BigDecimal!
  totalLiquidityBNB: BigDecimal!
}

type Bundle @entity {
  id: ID!

  "BNB price, in USD"
  bnbPrice: BigDecimal!
}

type Token @entity {
  id: ID!

  "Name"
  name: String!
  "Symbol"
  symbol: String!
  "Decimals"
  decimals: BigInt!

  # token specific volume
  untrackedVolumeUSD: BigDecimal!

  # transactions across all pairs
  totalTransactions: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!

  # derived prices
  derivedBNB: BigDecimal
  derivedUSD: BigDecimal

  # derived fields
  hourlyCandlesticks: [HourlyCandlestick!]! @derivedFrom(field: "token")
  pairBase: [Pair!]! @derivedFrom(field: "token0")
  pairQuote: [Pair!]! @derivedFrom(field: "token1")
}

type Pair @entity {
  id: ID!

  name: String!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveBNB: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveBNB: BigDecimal! # used for separating per pair reserves and global
  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  totalTransactions: BigInt!

  block: BigInt!
  timestamp: BigInt!

  # derived fields
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type Transaction @entity {
  id: ID!

  block: BigInt!
  timestamp: BigInt!
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  swaps: [Swap]!
}

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Swap event
  sender: Bytes!
  from: Bytes! # the EOA that initiated the txn
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes!
  logIndex: BigInt

  # derived info
  amountUSD: BigDecimal!
}

type HourlyCandlestick @entity {
  id: ID!

  date: Int!
  token: Token!

  # price stats
  openPriceUSD: BigDecimal!
  closePriceUSD: BigDecimal!
  lowPriceUSD: BigDecimal!
  highPriceUSD: BigDecimal!
}
